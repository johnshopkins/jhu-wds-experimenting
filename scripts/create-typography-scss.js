const writeFile = require('./lib/writeFile');

const fontFamilies = {
  sans: {
    family: 'proxima-nova,tahoma,sans-serif',
    weights: {
      light: '300',
      medium: '500',
      bold: '700',
      black: '900'
    },
    normalizer: 'calc(667 / 667)'
  },
  slab: {
    family: 'factoria,tahoma,sans-serif',
    weights: {
      light: '300',
      medium: '500',
      bold: '700',
      black: '900'
    },
    normalizer: 'calc(667 / 700)'
  },
  serif: {
    family: 'freight-text-pro,georgia,serif',
    weights: {
      light: '500',
      medium: '500',
      bold: '900',
      black: '900'
    },
    normalizer: 'calc(667 / 625)'
  },
  condensed: {
    family: 'alternate-gothic-extra-cond,tahoma,sans-serif',
    weights: {
      light: '800',
      medium: '800',
      bold: '800',
      black: '800'
    },
    normalizer: 'calc(667 / 667)'
  }
};

// some keys are strings because keys can't start with a number
const fontSizes = {
  md: {
    letterSpacing: '0',
    lineHeight: 1.4,
    scaling: 'none'
  },
  sm: {
    letterSpacing: '0.01em',
    lineHeight: 1.425,
    scaling: 'down'
  },
  xs: {
    letterSpacing: '0.02em',
    lineHeight: 1.45,
    scaling: 'down'
  },
  '2xs': {
    letterSpacing: '0.03em',
    lineHeight: 1.5,
    scaling: 'down'
  },
  '3xs': {
    letterSpacing: '0.04em',
    lineHeight: 1.6,
    scaling: 'down'
  },
  lg: {
    letterSpacing: 0,
    lineHeight: 1.333,
    scaling: 'up'
  },
  xl: {
    letterSpacing: 0,
    lineHeight: 1.25,
    scaling: 'up'
  },
  '2xl': {
    letterSpacing: 0,
    lineHeight: 1.125,
    scaling: 'up'
  },
  '3xl': {
    letterSpacing: 0,
    lineHeight: 1.1,
    scaling: 'up'
  }
}

const lines = [
  `// This file is generated by 'npm run create-typography-scss'`,
  ``,
  `// Factoria`,
  `@import "https://use.typekit.net/vxy8tas.css";`,
  ``,
  `// ATF Alternate Gothic`,
  `@import "https://use.typekit.net/nsj2nad.css";`,
  ``,
  `// Freight Text`,
  `@import "https://use.typekit.net/lnm5qra.css";`,
  ``,
  `// Proxima Nova`,
  `@import "https://use.typekit.net/jge8wgr.css";`,
  ``,
  `:root {`,
  `  --jhu-font-scale: 1.2;`,
  `  --jhu-font-size-normalizer: 1;`
];

// Font family variables
lines.push(``, `  // Font family variables`)
Object.keys(fontFamilies).map(category => {
  const {family} = fontFamilies[category];

  lines.push(
    `  --jhu-font-family-${category}: ${family};`
  )
});

// Font size variables
lines.push(``, `  // Font size variables`)
var baseFontSize = '';

Object.keys(fontSizes).map(size => {
  const {scaling} = fontSizes[size];
  // const scalingValue = Object.keys(fontSizes[size['scaling-factor']]);

  if (scaling === 'none') {
    lines.push(
      `  --jhu-font-size-${size}: calc(1rem * var(--jhu-font-size-normalizer));`
    );
    baseFontSize = `--jhu-font-size-${size}`;
  } else if (scaling === 'down') {
    lines.push(
      `  --jhu-font-size-${size}: calc(var(${baseFontSize}) / (((var(--jhu-font-scale) - 1) * (2 / 5)) + 1) * var(--jhu-font-size-normalizer));`
    );
    baseFontSize = `--jhu-font-size-${size}`;
  } else if (scaling === 'up') {
    if (baseFontSize === '--jhu-font-size-3xs') {
      baseFontSize = '--jhu-font-size-md';
    };

    lines.push(
      `  --jhu-font-size-${size}: calc(var(${baseFontSize}) * var(--jhu-font-scale) * var(--jhu-font-size-normalizer));`
    );
    baseFontSize = `--jhu-font-size-${size}`;
  }

  // lines.push(`  --jhu-font-size-${size}: calc(1rem * var(--jhu-font-scale) * var(--jhu-font-size-normalizer));`);
});

// Default font weight variables 
lines.push(``, `  // Default font weight variables`)
const weights = fontFamilies.sans.weights;
Object.keys(weights).map(weight => {
  lines.push(
    `  --jhu-font-weight-${weight}: ${weights[weight]};`
  )
});

lines.push(
  ``,
  `  @media screen and (width >= 420px) {`,
  `    --jhu-font-scale: 1.25;`,
  `  }`,
  ``,
  `  @media screen and (width >= 760px) {`,
  `    --jhu-font-scale: 1.3333;`,
  `  }`,
  ``,
  `  @media screen and (width >= 1200px) {`,
  `    --jhu-font-scale: 1.414;`,
  `  }`,
  ``,
  `  @media screen and (width >= 1440px) {`,
  `    --jhu-font-scale: 1.5;`,
  `  }`,
  `}`
)

// Font family mixins
lines.push(``, `// Font family mixins`)
lines.push(`@mixin jhu-font-family($family: sans) {`)

// loop through fontFamilies and compile each font-family mixin
Object.keys(fontFamilies).map(category => {
  const {weights, normalizer} = fontFamilies[category];

  if (category === 'sans') {
    lines.push(
      `  @if $family == ${category} {`,
    )
  } else {
    lines.push(
      ``,
      `  @else if $family == ${category} {`,
    )
  }

  lines.push(
    `    --jhu-font-size-normalizer: ${normalizer};`  
  )

  Object.keys(weights).map(weight => {
    lines.push(
      `    --jhu-font-weight-${weight}: ${weights[weight]};`
    )
  });

  lines.push(
    `    font-family: var(--jhu-font-family-${category});`
  )

  if (category === 'condensed') {
    lines.push(`    text-transform: uppercase;`)
  } else {
    lines.push(`    text-transform: inherit;`)
  }

  lines.push(`  }`)
});

lines.push(`}`)

// Font size mixins
lines.push(``, `// Font size mixins`)
lines.push(`@mixin jhu-font-size($size: md, $line-height: null, $letter-spacing: null) {`)

// loop through fontSizes and compile font-sizes
Object.keys(fontSizes).map(size => {
  const {letterSpacing, lineHeight} = fontSizes[size];

  if (size === 'md') {
    lines.push(
      `  @if $size == ${size} {`
    )
  } else {
    lines.push(
      ``,
      `  @else if $size == ${size} {`
    )
  }
  lines.push(
    `    font-size: var(--jhu-font-size-${size});`,
    ``,
    `    @if $letter-spacing {`,
    `      letter-spacing: $letter-spacing;`,
    `    }`,
    `    @else {`,
    `      letter-spacing: ${letterSpacing};`,
    `    }`,
    ``,
    `    @if $line-height {`,
    `      line-height: $line-height;`,
    `    }`,
    `    @else {`,
    `      line-height: ${lineHeight};`,
    `    }`,
    `  }`
  )
});

lines.push(
  `  @else {`,
  `    font-size: calc($size * var(--jhu-font-size-normalizer));`,
  `    letter-spacing: $letter-spacing;`,
  `    line-height: $line-height;`,
  `  }`,
  `}`
)

lines.push(
  ``, 
  `html {`,
  `  @include jhu-font-family(sans);`,
  `  font-size: 16px;`,
  ``,
  `  @media screen and (width >= 420px) {`,
  `    font-size: 17px;`,
  `  }`,
  ``,
  `  @media screen and (width >= 760px) {`,
  `    font-size: 18px;`,
  `  }`,
  ``,
  `  @media screen and (width >= 1200px) {`,
  `    font-size: 19px;`,
  `  }`,
  ``,
  `  @media screen and (width >= 1440px) {`,
  `    font-size: 21px;`,
  `  }`,
  `}`
);

// Font family utility classes
lines.push(``, `// Font family utility classes`);
// loop through fontFamilies and compile font-families
Object.keys(fontFamilies).map(category => {

  lines.push(
    ``,
    `.jhu-font-family-${category} {`,
    `  @include jhu-font-family(${category});`,
    `}`
  )
});

lines.push(``, '// Font size utility classes')
// loop through fontSizes and compile font-sizes
Object.keys(fontSizes).map(size => {

  lines.push(
    ``,
    `.jhu-font-size-${size} {`,
    `  @include jhu-font-size(${size});`,
    `}`
  )
});


lines.push(``, `// Font weight utility classes`)

Object.keys(fontFamilies.sans.weights).map(weight => {

  lines.push(
    ``,
    `.jhu-font-weight-${weight} {`,
    `  font-weight: var(--jhu-font-weight-${weight});`,
    `}`
  )
});

lines.push(
  ``,
  `.kicker {`,
  `  @include jhu-font-family(sans);`,
  `  @include jhu-font-size(xs);`,
  `  color: var(--jhu-blue-50);`,
  `  letter-spacing: var(--jhu-spacing-025);`,
  `  text-transform: uppercase;`,
  `}`
)

// write
writeFile('./src/shared/scss/variables/typography.scss', lines);
