name: Prepare release

# loosely based on storybook's non-patch-release workflow:
# https://github.com/storybookjs/storybook/blob/next/.github/workflows/prepare-non-patch-release.yml

# release-1.2, release-1.0, patch-1.1.1

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: "Release type"
        required: true
        default: "prerelease"
        type: choice
        options:
          - prerelease
          - prepatch
          - preminor
          - premajor
          - patch
          - minor
          - major
      pre-id:
        description: For a prerelease, prerelease identifier to use, eg. 'alpha', 'beta', 'rc'
        required: false
        type: string
#   push:
#     branches:
#       - '*'
#       - 'release-**'
#       - 'patch-**'

jobs:
  branch-checks:
    runs-on: ubuntu-latest
    steps:
      - id: get-branch
        run: |
          BRANCH=($(echo ${{ github.ref }} | sed -E 's/refs\/heads\///'))
          echo "branch=$BRANCH" >> $GITHUB_ENV
    outputs:
      branch: ${{ env.branch }}
#       is-release-branch: ${{ startsWith(env.branch, 'release-') }}
      is-patch-branch: ${{ startsWith(env.branch, 'patch-') }}

#   handle-release:
#     runs-on: ubuntu-latest
#     needs: branch-checks
#     steps:
#       - name: Any Name Bash Test Step
#         shell: bash
#         run: |
#           echo "BRANCH: $BRANCH"
#           echo "IS_PATCH: $IS_PATCH"
#           echo "IS_RELEASE: $IS_RELEASE"
#         env:
#           BRANCH: ${{ needs.branch-checks.outputs.branch }}
#           IS_PATCH: ${{ needs.branch-checks.outputs.is-patch-branch }}
#           IS_RELEASE: ${{ needs.branch-checks.outputs.is-release-branch }}

#   handle-patch-release:
#     runs-on: ubuntu-latest
#     needs: branch-checks
#     if: ${{ needs.branch-checks.outputs.is-patch-branch == 'true' }}

  handle-release:
    runs-on: ubuntu-latest
    needs: branch-checks
    if: ${{ needs.branch-checks.outputs.is-patch-branch != 'true' }}
    steps:
      # create release branch using yarn  (release-2.0)
        # yarn release:version --deferred --release-type ${{ inputs.release-type || 'prerelease' }} ${{ inputs.pre-id && format('{0} {1}', '--pre-id', inputs.pre-id) || '' }} --verbose
      # create pull request from new branch
        # create a pull request template

#   open-pull-request:
#     runs-on: ubuntu-latest
#     steps:
#       - run: gh pr create
#         env:
#           GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           ISSUE: ${{ github.event.issue.html_url }}
